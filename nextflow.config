params {

    outdir = "results"
	
    assembly = "GRCh38_no_alt"
    samples = null

    build_references = false

    aligner = "bwa2"
    aligners_allowed = [ "bwa", "bwa2", "dragmap"]

    fasta = null
    fasta_fai = null
    fasta_gz = null
    fasta_gzfai = null
    fasta_gzi = null
    dict = null
    dbsnp = null
    csq_gtf = null
    omni = null
    hapmap = null
    g1k = null
    mills = null
    axiom = null
    snps = null
    indels = null	
	
    tools = null

    scratch = true

    interval_padding = 10

    gatk_hard_filter = "ExcessHet > 54.69"

    skip_mutect_pon = false
    mutect_normals = null
	
    maxMultiqcEmailFileSize = 25.MB
    email = false
    skip_multiqc = false

    panel = false
    all_panels = false
    panel_intervals = false
    panel_coverage = 10

    cram = false

    amplicon_bed = null

    min_mapq = 20

    sry_bed = false

    targets = false
    baits = false
    bed = false

    kit = null
    kill = false

    tools = null

    phase = false

    cnvkit_mode = "hmm-germline"
    cnvkit_mode_tumor = "cbs"
    
    cnv_gz = null
    skip_cnv_gz = false

    joint_calling = false
    glnexus_config = "DeepVariant"

    help = false

    fasta = false

    effects = false
    dbnsfp_db = null
    dbnsfp_fields = "DANN_score,M-CAP_pred,REVEL_score"
    spliceai_fields = null
    dbscsnv_db = null
    cadd_snps = null
    cadd_indels = null
    vep_mastermind = null
    vep_cache_dir = null
    vep_plugin_dir = null

    plaintext_email = false

    logo = "${baseDir}/assets/ikmblogo.png"

    max_memory = 128.GB
    max_cpus = 16
    max_time = 240.h
    maxMultiqcEmailFileSize = 25.MB

}

manifest {
	version = "5.1rc1"
	name = "Exome-seq"
	author = "Marc P. Hoeppner"
	homePage = "https://github.com/ikmb/exome-seq"
	nextflowVersion = "22.04.5"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/exome-pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/exome-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/exome-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/exome-pipeline_dag.svg"
}

process.container = 'ikmb/exome-seq:devel'

profiles {
	standard {
		includeConfig 'conf/medcluster.config'
		includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
		includeConfig 'conf/references.config'
	}
	diagnostic {
		includeConfig 'conf/diagnostic.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
		includeConfig 'conf/references.config'
	}
    test {
		includeConfig 'conf/test.config'
        includeConfig 'conf/base.config'
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
