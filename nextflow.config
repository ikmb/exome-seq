params.nextflow_required_version = "0.31.0"

params.outdir = "outdir"
params.saveTrimmed = false

params.snp_filter_rules = "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0"
params.indel_filter_rules = "QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0"

params.effect_prediction = false

params.fasta = false
params.dbsnp = false
params.g1k = false
params.mills_indels = false
params.omni = false
params.hapmap = false

params.targets = false
params.baits = false

profiles {
	standard {
		includeConfig 'config/base.config'
		includeConfig 'config/conda.config'
		includeConfig 'config/rzcluster.config'
                includeConfig 'config/resources.config'
	}
	diagnostic {
                includeConfig 'config/base.config'
                includeConfig 'config/conda.config'
                includeConfig 'config/diagnostic.config'
                includeConfig 'config/resources.config'
	}
	devel {
                includeConfig 'config/base.config'
                includeConfig 'config/conda.config'
		includeConfig 'config/rzcluster_new.config'
                includeConfig 'config/resources.config'
	}
	standalone {
		includeConfig 'config/base.config'
                includeConfig 'config/standalone.config'
                includeConfig 'config/rzcluster_new.config'
                includeConfig 'config/resources.config'
	}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
