

// Job paramaters to set for this environment

// Process setting

process {

  // Global cluster parameters
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,140,7] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // Specific cluster parameters for each process

  // software dependencies moved to conda.config

  withLabel: gatk {
	container = "docker://quay.io/biocontainers/gatk4:4.3.0.0--py36hdfd78af_0"
  }
  withLabel: rtgtools {
	container = "docker://quay.io/biocontainers/rtg-tools:3.11--0"
  }
  withLabel: short_serial {
	time = { check_max( 4.h * task.attempt, 'time' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withLabel: medium_serial {
	time = { check_max( 8.h * task.attempt, 'time' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withLabel: long_serial {
        time = { check_max( 12.h * task.attempt, 'time' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withLabel: medium_parallel {
	time = { check_max( 8.h * task.attempt, 'time' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withLabel: long_parallel {
	time = { check_max( 24.h * task.attempt, 'time' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withLabel: extra_long_parallel {
        time = { check_max( 96.h * task.attempt, 'time' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:'MANTA' {
	time = { check_max( 3.h * task.attempt, 'time' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:'VEP|HAPLOSAURUS' {
	time = { check_max( 4.h * task.attempt, 'time' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        cpus = { check_max( params.max_cpus * task.attempt, 'cpus' ) }
  }
  withName:'BWA_MEM|BWA2_MEM|DRAGMAP_ALIGN' {
        memory = { check_max( params.max_memory * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
        cpus = { check_max( params.max_cpus , 'cpus' ) }
  }
  withName:TRIM {
        time = { check_max( 5.h * task.attempt, 'time' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
	cpus = 8
  }
  withName:MERGE_MULTI_LANE {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }
  withName:DEDUP {
        memory = { 8.GB * task.attempt }
        time = { check_max( 12.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:'OXO_METRICS|WHATSHAP|WHATSHAP_SINGLE' {
	time = { check_max( 12.h * task.attempt, 'time' ) }
        memory = { 16.GB * task.attempt }

  }
  withName:GATK_HAPLOTYPECALLER {
	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:'GATK_MUTECT2|GATK_MUTECT2_PAIR' {
	memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }
  withName:HYBRID_CAPTURE_METRICS {
  	time = { check_max( 12.h * task.attempt, 'time' ) }
        memory = { 12.GB * task.attempt }
  }
  withName:MULTI_METRICS {
  	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
  	time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:'MULTIQC_FASTQ|MULTIQC_SAMPLE|MULTIQC_PANEL|MULTIQC_LIBRARY' {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:'DEEPVARIANT|STRELKA_JOINTCALLING|STRELKA|GATK_HAPLOTYPECALLER_SINGLE|GATK_HAPLOTYPECALLER_GVCF' {
	cpus = { check_max( params.max_cpus , 'cpus' ) }
	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
  } 
  withName: MERGE_GVCFS {
	time = { check_max( 12.h * task.attempt, 'time' ) }
  }

}



