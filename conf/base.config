
// Job paramaters to set for this environment

params.scratch = true

// Resource manager settings

// Process setting

process {

  // Global cluster parameters
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,140,7] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // Specific cluster parameters for each process

  // software dependencies moved to conda.config

  withName:runBWA {
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( params.max_cpus , 'cpus' ) }
  }
  withName:runFastp {
        time = { check_max( 5.h * task.attempt, 'time' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        cpus = 8
  }
  withName:mergeBamFiles_bySample {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }
  withName:runMarkDuplicates {
        memory = { 8.GB * task.attempt }
        time = { check_max( 12.h * task.attempt, 'time' ) }
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  }
  withName:runBaseRecalibrator {
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 12.h * task.attempt, 'time' ) }
  	cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  }
  withName:runApplyBQSR {
	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
	time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName:runOxoGMetrics {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runHybridCaptureMetrics {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runCollectMultipleMetrics {
  	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
  	time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcFastq {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcLibrary {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcSample {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName: "runMultiqcLibrary" {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcSample {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcLibrary {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcSample {
  	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runMultiqcPanel {
	time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName:runHCSample {
  	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
  	time = { check_max( 8.h * task.attempt, 'time' ) }
  	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:runGenomicsDBImport {
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 48.h * task.attempt, 'time' ) }
  	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:runGenotypeGVCFs {
  	memory = { check_max( 48.GB * task.attempt, 'memory' ) }
  	time = { check_max( 48.h * task.attempt, 'time' ) }
  	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:runHardFilterIndel {
  	memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  	time = { check_max( 12.h * task.attempt, 'time' ) }
  	cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }
  withName:runHardFilterSNP {
  	memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  	time = { check_max( 12.h * task.attempt, 'time' ) }
  	cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }
  withName:runRecalibrationModeSNP {
  	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
  	time = { check_max( 16.h * task.attempt, 'time' ) }
  	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:runRecalibrationModeIndel {
    	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
    	time = { check_max( 16.h * task.attempt, 'time' ) }
    	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }
  withName:runRecalIndelApply {
    	memory = { check_max( 25.GB * task.attempt, 'memory' ) }
    	time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:runRecalSNPApply {
    	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    	time = { check_max( 12.h * task.attempt, 'time' ) }
    	cpus = { check_max( params.max_cpus , 'cpus' ) }
  }
  withName:runVariantFiltrationIndel {
    	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    	time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:runSelectVariants {
      	time = { check_max( 12.h * task.attempt, 'time' ) }
      	memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:runSplitBySample {
      	time = { check_max( 12.h * task.attempt, 'time' ) }
      	memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:runSplitHardVariantsBySample {
      	time = { check_max( 12.h * task.attempt, 'time' ) }
      	memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }

}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  maxMultiqcEmailFileSize = 25.MB

}


