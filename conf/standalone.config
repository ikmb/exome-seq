
// Job paramaters to set for this environment


process {

  withName:runBWA {
	memory = { check_max( 64.GB * task.attempt, 'memory' ) }
	time = { check_max( 4.h * task.attempt, 'time' ) }
	cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  }

  withName:runTrimgalore {
     time = { check_max( 5.h * task.attempt, 'time' ) }
     memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }

  withName:mergeBamFiles_bySample {
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }

  withName:runMarkDuplicates { 
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  }

  withName:runBaseRecalibrator {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  }

  withName:runApplyBQSR {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
  }

  withName:runOxoGMetrics {
        time = { check_max( 6.h * task.attempt, 'time' ) }
  }

  withName:runHybridCaptureMetrics {
     time = { check_max( 6.h * task.attempt, 'time' ) }
  }

  withName:runCollectMultipleMetrics {
        memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName:runMultiQCFastq {
        time = { check_max( 6.h * task.attempt, 'time' ) }
  }

  withName:runMultiQCLibrary {
  }

  withName:runMultiQCSample {
  }

  withName:runHCSample {
        memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }

  withName:runGenomicsDBImport {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  } 

  withName:runJoinedGenotyping {
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }

  withName:runHardFilterIndel {
	memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }

  withName:runHardFilterSNP {
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
  }

  withName:combineVariantsFromGenotyping {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 5.h * task.attempt, 'time' ) }
  }

  withName:runRecalibrationModeSNP {
        memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }

  withName:runRecalibrationModeIndel {
        memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }

  withName:runRecalIndelApply {
        memory = { check_max( 25.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName:runRecalSNPApply {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  } 

  withName:runVariantFiltrationIndel {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }

  }

  withName:runCombineVariants {
  }

  withName:runCombineHardVariants {
  }

  withName:runVep {
	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }

}



